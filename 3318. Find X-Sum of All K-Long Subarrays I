
class Solution {
public:
    vector<int> findXSum(vector<int>& nums, int k, int x) {
        vector<int> result;
        int n = nums.size();
        
        for (int i = 0; i <= n - k; ++i) {
            unordered_map<int, int> freq;
            for (int j = i; j < i + k; ++j) {
                freq[nums[j]]++;
            }
            
            vector<pair<int, int>> e;
            for (auto& entry : freq) {
                e.emplace_back(entry.first, entry.second);
            }
            
            sort(e.begin(), e.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
                if (a.second != b.second) {
                    return a.second > b.second;
                }
                return a.first > b.first;
            });
            
            int take = min(x, (int)e.size());
            unordered_set<int> selected;
            for (int j = 0; j < take; ++j) {
                selected.insert(e[j].first);
            }
            
            int sum = 0;
            for (int j = i; j < i + k; ++j) {
                if (selected.count(nums[j])) {
                    sum += nums[j];
                }
            }
            
            result.push_back(sum);
        }
        
        return result;
    }
};
